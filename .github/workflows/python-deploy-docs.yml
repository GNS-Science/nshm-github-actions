name: Python Deploy Docs

on:
  workflow_call:
    inputs:
        python-version:
            description: The python version to use
            required: true
            type: string
            default: "3.10"
        poetry-version:
            description: The poetry version to use
            required: false
            type: string
            default: "latest"
        working-directory:
            description: The working directory
            required: false
            type: string
            default: .


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    defaults:
        run:
            working-directory: ${{ inputs.working-directory }}

    steps:
        #----------------------------------------------
        #       checkout repo
        #----------------------------------------------
      - uses: actions/checkout@v4

        #----------------------------------------------
        #       setup python
        #----------------------------------------------
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

        #----------------------------------------------
        #       setup poetry
        #----------------------------------------------
      - name: Install and configure Poetry
        uses: GNS-Science/install-poetry@main
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true        

        #----------------------------------------------
        #       load cached venv if cache exists
        #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry --version 
          poetry install --with dev --all-extras

        #----------------------------------------------
        # build documentation
        #----------------------------------------------
      - name: build documentation
        run: |
          poetry run mkdocs build
          
        #----------------------------------------------
        # package and upload artifact for deployment to GitHub Pages 
        #----------------------------------------------
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ${{ inputs.working-directory }}/site


        #----------------------------------------------
        # deploy page
        #----------------------------------------------
      - name: Deploy Docs to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4