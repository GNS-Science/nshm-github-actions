name: Python Release

on:
  workflow_call:
    inputs:
        python-version:
            description: The python version to use
            required: true
            type: string
            default: "3.10"
        poetry-version:
            description: The poetry version to use
            required: false
            type: string
            default: "latest"
        working-directory:
            description: The working directory
            required: false
            type: string
            default: .
        repo-version:
            description: The repo version
            required: false
            type: string
            default: "none"


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    defaults:
        run:
            # shell: bash
            working-directory: ${{ inputs.working-directory }}
    # env:
        # OS: ubuntu-latest
        # PYTHON: ${{ inputs.python-version }}

    steps:
        #----------------------------------------------
        #       checkout repo
        #----------------------------------------------
      - uses: actions/checkout@v4

        #----------------------------------------------
        #       get version
        #----------------------------------------------
      - name: Get version from tag
        id: tag_name
        run: |
          if [ "$VERSION" = "none" ]; then
            echo ::set-output name=current_version::${GITHUB_REF#refs/tags/v}
          else
            echo ::set-output name=current_version::"$VERSION"
          fi
        shell: bash
        env:
            VERSION: ${{ inputs.repo-version }}

        #----------------------------------------------
        #       get changelog entry
        #----------------------------------------------
      - name: Get Changelog Entry
        id: changelog_reader
        uses: GNS-Science/changelog-reader-action@master
        with:
          validation_depth: 10
          version: ${{ steps.tag_name.outputs.current_version }}
          path: ${{ inputs.working-directory }}/CHANGELOG.md


        #----------------------------------------------
        #       setup python
        #----------------------------------------------
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

        #----------------------------------------------
        #       setup poetry
        #----------------------------------------------
      - name: Install and configure Poetry
        uses: GNS-Science/install-poetry@main
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true        

        #----------------------------------------------
        #       load cached venv if cache exists
        #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-publish-static-docs


        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry --version 
          poetry install --with dev --all-extras

        #----------------------------------------------
        # build documentation
        #----------------------------------------------
      - name: build documentation
        run: |
          poetry run mkdocs build
          
        #----------------------------------------------
        # package and upload artifact for deployment to GitHub Pages 
        #----------------------------------------------
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ${{ inputs.working-directory }}/site
  
        #----------------------------------------------
        # build wheels and tarball
        #----------------------------------------------
      - name: Build wheels and source tarball
        run: >-
          poetry build

      - name: show temporary      files
        run: >-
          ls -l

        #----------------------------------------------
        # create GitHub release
        #----------------------------------------------
      - name: create github release
        id: create_release
        uses: GNS-Science/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.changelog_reader.outputs.changes }}
          files: ${{ inputs.working-directory }}/dist/*.whl
          draft: false
          prerelease: false
 
        #----------------------------------------------
        # publish to PyPI
        #----------------------------------------------
      - name: publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

    #----------------------------------------------
    # deploy documentation
    #----------------------------------------------
  deploy:
    environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Deploy Docs to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4