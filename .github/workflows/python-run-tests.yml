name: Run Python Tests 

on:
  workflow_call:
    inputs:
      operating-systems:
        description: A JavaScript array of all OS's to use
        required: false
        type: string
        default: "['ubuntu-latest', 'windows-latest', 'macos-latest']"
      python-versions:
        description: A JavaScript array of all Python versions to use
        required: false
        type: string
        default: "['3.10', '3.11']"
      poetry-version:
        description: The poetry verion to use
        required: false
        type: string
        default: "latest"     


jobs:
  run_unit_tests:
    timeout-minutes: 10

    strategy:
      matrix:
        python-version: ${{ fromJson(inputs.python-versions) }}
        os: ${{ fromJson(inputs.operating-systems) }}

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and configure Poetry
        uses: GNS-Science/install-poetry@main
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-run-tests
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root --with dev
      - name: test with tox (uses tox-gh-actions to select correct environment)
        run:
          poetry run tox
      - name: list files
        run: ls -l .
      - name: Submit coverage report
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml # optional
          flags: unittests # optional
          name: codecov-umbrella # optional
          token: ${{ secrets.CODECOV_TOKEN }} # required
          verbose: true # optional (default = false)
          env_vars: OS,PYTHON
          # fail_ci_if_error: true # optional (default = false)